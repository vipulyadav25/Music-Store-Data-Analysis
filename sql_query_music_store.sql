create database Music_Store_Data;
use  Music_Store_Data;

select * from album2 ;
select * from artist;
select * from customer;
select * from employee;
select * from genre;
select * from invoice;
select  * from invoice_line;
select * from media_type;
select * from  playlist;
select * from playlist_track; 
select * from  track;


--  Sales Analysis:
-- 1. What is the total revenue generated by the music store?
select round(sum(unit_price*quantity),2) as total_revenue from invoice_line;

-- 2.Which artist generated the highest revenue?
select a.name as artist_name,round(sum(inv.unit_price*inv.quantity),2) as total_revenue from artist as  a
join album2 as  al
on a.artist_id=al.artist_id
join track as t
on al.album_id=t.album_id
join invoice_line as  inv
on t.track_id=inv.track_id
group by a.name
order by total_revenue desc
limit 1
;
-- 3. Which three album has sold the most copies ?
select a.title as album_title,sum(inv.quantity) as copies from album2 as a
join track as t
on a.album_id=t.album_id
join invoice_line as inv
on t.track_id=inv.track_id
group by a.title
order by copies desc
limit 3;

-- 4.What are the total sales per genre?
select g.name as genre_name,round(sum(inv.unit_price*inv.quantity),2) as total_sales from genre as g
join track as t
on g.genre_id=t.genre_id
join invoice_line as inv
on t.track_id=inv.track_id
group by genre_name
order by total_sales desc;

-- 5.what are the sales trend over the years?
select year(invoice_date) as year ,round(sum(total),2) as total_sales from invoice
group by year;

-- 6.what are monthly sales trend ?
select monthname(invoice_date) as month ,
round(sum(total),2) as total_sales from invoice
group by month;

-- 7. what is the total no of quantity sold by music store?
select sum(quantity) as total_quantity from invoice_line;

-- 8. Write a query that returns five cities that
-- has the highest sum of invoice totals. Return both the city name & sum of all invoice totals
select c.city,round(sum(i.total),2) as total from customer as c
join invoice as i
on c.customer_id=i.customer_id
group by c.city 
order by total desc
limit 5;

-- 9. Write a query that returns five cities that
-- has the lowest sum of invoice totals. Return both the city name & sum of all invoice totals
select c.city,round(sum(i.total),2) as total from customer as c
join invoice as i
on c.customer_id=i.customer_id
group by c.city 
order by total 
limit 5;

-- 10.On which days of the week do most purchases happen?
select dayname(i.invoice_date) as day ,sum(inv.quantity) as purchase_quantity from invoice as i
join invoice_line as inv
on i.invoice_id=inv.invoice_id
group by day
order by purchase_quantity desc;

-- 11.Which five countries generate the highest revenue?
select c.country,round(sum(i.total),2) as revenue from customer as c
join invoice as i
on c.customer_id=i.customer_id
group by country
order by revenue desc
limit 5;

-- 11.Which five countries generate the lowest revenue?
select c.country,round(sum(i.total),2) as revenue from customer as c
join invoice as i
on c.customer_id=i.customer_id
group by country
order by revenue 
limit 5;




--  Customer Insights:
-- 1. Who are the top 5 customers by total purchase amount?
select c.first_name,c.last_name,round(sum(i.total),2) as purchase_amount from customer as c
join invoice as i
on c.customer_id=i.customer_id
group by c.first_name,c.last_name
order by purchase_amount desc
limit 5;

-- 2. How many unique customers bought music from each country?
select c.country,count(distinct i.customer_id) as unique_customer from customer as c
join invoice as i 
on c.customer_id=i.customer_id
group by c.country
order by unique_customer desc; 

-- 3. What is the average purchase value per customer?
select round(sum(i.total)/count(distinct c.customer_id),2) as average_purchase_value  from customer as c
join invoice as i 
on c.customer_id=i.customer_id;

-- 4.Write a query that determines the customer that has spent the most on music for each
--   country. Write a query that returns the country along with the top customer and how
--   much they spent. For countries where the top amount spent is shared, provide all
--   customers who spent this amount
with cte as (select c.country,c.customer_id,c.first_name,c.last_name,round(sum(i.total),2) as total
 from customer as c
join invoice as i
on c.customer_id=i.customer_id
group by 1,2,3,4)
select country ,first_name,last_name,total from 
(select *,dense_rank() over(partition by country order by total desc) as rnk from cte ) as temp                  
where rnk=1
order by total desc;



 -- Product Popularity:
 
-- 1. Which track is the most popular by number of sales?
select t.name as track_name , sum(inv.quantity) as total_quantity from invoice_line as inv
join track as t
on inv.track_id=t.track_id
group by track_name 
order by total_quantity desc
limit 1;

-- 2. What is the average price of tracks by genre?
select g.name as genre_name,round(avg(t.unit_price),2) as average_price from track as t
join genre as g
on t.genre_id=g.genre_id
group by genre_name;

-- 3.List tracks that have never been sold.
select track_id,name from track 
where track_id not in (select track_id from invoice_line); 

-- 4. Which is the most popular genre?
select g.name as genre_name  ,sum(inv.quantity) as quantity from invoice_line as inv
join track as t
on inv.track_id=t.track_id
join genre as g 
on t.genre_id=g.genre_id
group by g.name
order by quantity desc
limit 1;

-- 5.Identify albums that are top-selling per artist.
with cte as (select a.artist_id, a.name as artist_name,al.title as album_name ,sum(inv.quantity) as total_quantity 
from invoice_line as inv
join track as t
on inv.track_id=t.track_id
join album2 as al
on t.album_id=al.album_id
join artist as a
on al.artist_id=a.artist_id
group by a.artist_id,artist_name,al.title
order by a.artist_id )

select artist_name,album_name,max_quantity from 
(select *,max(total_quantity) over(partition by artist_id) as max_quantity from cte) as temp
where total_quantity=max_quantity
order by max_quantity desc;

-- 6.We want to find out the most popular music Genre for each country. We determine the
--   most popular genre as the genre with the highest amount of purchases. Write a query
--   that returns each country along with the top Genre. For countries where the maximum
--   number of purchases is shared return all Genres

with cte as (select c.country ,g.name as genre_name,sum(inv.quantity) as purchases from customer as c
join invoice as i
on c.customer_id=i.customer_id
join invoice_line as inv
on i.invoice_id=inv.invoice_id
join track as t
on inv.track_id=t.track_id
join genre as g
on t.genre_id=g.genre_id
group by c.country,genre_name),
cte1 as (select * ,dense_rank() over(partition by country order by purchases desc) as rnk from cte)
select country,genre_name,purchases from cte1
where rnk=1
order by purchases desc;



-- 7.Return all the track names that have a song length longer than the average song length.
--  Return the Name and Milliseconds for each track. Order by the song length

select name as track_name,milliseconds as song_length from track
where milliseconds>(select avg(milliseconds) from track)
order by song_length desc;




